---
import logoSvg from "../../public/finar-logo-deira.svg?raw";
import homeSvg from "../../public/home.svg?raw";
import ToggleMenu from "~components/ToggleMenu.astro";
import { getHomePermalink, trimSlash } from "~/utils/permalinks";
import slugify from "~/utils/slugify";

interface AltSection {
  altsectionhead: string;
  altsectionitems: SectionLink[];
}
interface SectionLink {
  text: string;
  href: string;
}
interface Section {
  text: string;
  href?: string;
  ariaLabel?: string;
  finarlinks?: SectionLink[];
  hizmetlerlinks?: AltSection[];
  icon?: string;
  homeicon?: boolean;
}

export interface Props {
	id?: string;
	sections?: Section[];
	isSticky?: boolean;
	isFullWidth?: boolean;
	showToggleTheme?: boolean;
	showRssFeed?: boolean;
	position?: string;
	isHome?: boolean;
}

const { id = "header", sections = [], isSticky = false, isFullWidth = false, position = "center", isHome = false } = Astro.props;

const currentPath = `/${trimSlash(new URL(Astro.url).pathname)}`;
---

{/* md: to lg: */}
<header
	class:list={[{ home: isHome, sticky: isSticky, relative: !isSticky }, "top-0 z-40 mx-auto w-full flex-none border-b border-gray-50/0 transition-[opacity] ease-in-out"]}
	{...isSticky ? { "data-aw-sticky-header": true } : {}}
	{...id ? { id } : {}}
>

	<div class:list={["container relative mx-auto h-full w-full px-[15px] pb-4 pt-5 lg:flex lg:justify-between lg:pb-5 lg:pt-[48px]", { "max-w-7xl": isFullWidth }]}>

		<div class:list={[{ "mr-auto rtl:ml-auto rtl:mr-0": position === "right" }, "flex justify-between"]}>
			<a class="header-logo relative flex items-center text-[var(--logo-color)]" aria-label="Finar Logo" href={getHomePermalink()}>
				<Fragment set:html={logoSvg} />
			</a>
			<div class="flex items-center lg:hidden">
				<ToggleMenu home={isHome} />
			</div>
		</div>

		<nav class="hidden w-full overflow-y-auto overflow-x-hidden lg:mx-0 lg:flex lg:w-auto lg:items-center lg:overflow-x-auto lg:overflow-y-visible" aria-label="Main navigation">
			<ul class="align-center container flex flex-col text-xl font-medium tracking-[0.01rem] lg:w-auto lg:flex-row lg:self-center lg:text-[0.9375rem]">
				{
					sections.map(({ text, href, finarlinks, hizmetlerlinks, homeicon }) => (
						<li class:list={[{ dropdown: finarlinks?.length },{ dropdown: hizmetlerlinks?.length }]}>
							{finarlinks && (
								<button class:list={["flex items-end px-[18px] py-0 font-bold text-[var(--nav-primary-color)] lg:py-1 lg:font-light"]}>
									<Fragment set:html={text} />
								</button>
								<ul class="dropdown-menu py-0 pl-4 font-medium lg:absolute lg:-ml-[110px] lg:min-w-[300px] lg:pt-4 lg:pl-0">
									<div class="lg:pt-4 lg:bg-gri">
										{finarlinks.map(({ text: text2, href: href2 }) => (
											<li>
												<a
													class:list={[
														"whitespace-no-wrap relative block px-3 py-2 leading-tight text-[var(--nav-primary-color)] hover:text-mavi lg:text-center lg:text-white",
														{
															"aw-link-active":
																currentPath === "/"
																	? currentPath.includes(href2 ?? "")
																	: currentPath
																			.split("/")
																			.join("")
																			.includes(href2 === "/" ? href2 : (href2?.split("/").join("") ?? "")),
														},
													]}
													href={href2}
													aria-label={text2}>
													<Fragment set:html={text2} />
												</a>
											</li>
										))}
									</div>
								</ul>
							)}
							{hizmetlerlinks && (
								<button class:list={["flex items-end px-[18px] py-0 font-bold text-[var(--nav-primary-color)] lg:py-1 lg:font-light"]}>
									<Fragment set:html={text} />
								</button>
								<ul id="hizmetlermenusection" class="dropdown-menu ml-[28px] lg:ml-0 lg:absolute lg:w-full lg:left-0 lg:grid lg:grid-cols-4 lg:gap-[30px] lg:px-[15px] lg:pt-4">
									{
										hizmetlerlinks.map(({ altsectionhead, altsectionitems }) => (
											<div id={slugify(altsectionhead).replace("-","")} class="lg:bg-gri">
												<li class="sectionhead text-[0.85rem] lg:text-base lg:text-center text-mavi lg:text-white lg:pt-4">{altsectionhead}</li>
												{altsectionitems?.map(({ text: text3, href: href3 }) => (
													<li>
														<a
															class:list={[
																"whitespace-no-wrap relative block px-3 py-2 leading-tight text-[var(--nav-primary-color)] hover:text-mavi lg:text-center lg:text-white",
																{
																	"aw-link-active":
																		currentPath === "/"
																			? currentPath.includes(href3 ?? "")
																			: currentPath
																					.split("/")
																					.join("")
																					.includes(href3 === "/" ? href3 : (href3?.split("/").join("") ?? "")),
																},
															]}
															href={href3}
															aria-label={text3}>
															{/* {console.log(
																currentPath === "/"
																	? currentPath.includes(href ?? "")
																	: currentPath
																			.split("/")
																			.join("")
																			.includes(href === "/" ? href : (href?.split("/").join("") ?? ""))
															)} */}
															<Fragment set:html={text3} />
														</a>
													</li>
												))}
											</div>
										))
									}
								</ul>
							)}
							{href && (
								<a
									class:list={[
										"relative flex items-end px-[18px] py-0 font-bold text-[var(--nav-primary-color)] lg:py-1 lg:font-light",
										{
											"aw-link-active":
												currentPath === "/"
													? currentPath.includes(href ?? "")
													: currentPath
															.split("/")
															.join("")
															.includes(href === "/" ? href : (href?.split("/").join("") ?? "")),
										},
									]}
									href={href}
									aria-label={homeicon ? "home" : slugify(text)}>
									{/* {console.log(
										currentPath === "/"
											? currentPath.includes(href ?? "")
											: currentPath
													.split("/")
													.join("")
													.includes(href === "/" ? href : (href?.split("/").join("") ?? "")),
										"-",
										currentPath,
										"-",
										currentPath.split("/").join(""),
										"-",
										href,
										"-",
										href?.split("/").join("")
									)} */}
									{homeicon ? <Fragment set:html={homeSvg} /> : text}
								</a>
							)}
						</li>
					))
				}
			</ul>
		</nav>

	</div>

</header>
